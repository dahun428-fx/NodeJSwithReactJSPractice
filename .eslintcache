[{"C:\\app\\mywebapp\\src\\index.js":"1","C:\\app\\mywebapp\\src\\reportWebVitals.js":"2","C:\\app\\mywebapp\\src\\App.js":"3","C:\\app\\mywebapp\\src\\components\\Customer.js":"4","C:\\app\\mywebapp\\src\\example\\ForceUpdateExample.js":"5","C:\\app\\mywebapp\\src\\LifeCycleSample.js":"6","C:\\app\\mywebapp\\src\\components\\CustomerAdd.js":"7","C:\\app\\mywebapp\\src\\components\\CustomerDel.js":"8"},{"size":2257,"mtime":1607580046596,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":8399,"mtime":1607670524313,"results":"12","hashOfConfig":"10"},{"size":1535,"mtime":1607669327377,"results":"13","hashOfConfig":"10"},{"size":886,"mtime":1607587430955,"results":"14","hashOfConfig":"10"},{"size":1605,"mtime":1607661753260,"results":"15","hashOfConfig":"10"},{"size":6042,"mtime":1607675120756,"results":"16","hashOfConfig":"10"},{"size":2176,"mtime":1607675187505,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"s1p9rs",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\app\\mywebapp\\src\\index.js",[],["37","38"],"C:\\app\\mywebapp\\src\\reportWebVitals.js",[],"C:\\app\\mywebapp\\src\\App.js",["39","40","41","42","43","44"],"import React, {Component, Fragment} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n// import MyWork from './MyWork';\n// import MyComponent from './MyComponent';\n// import Counter from './Counter';\n// import Say from './Say';\n// import ForceUpdateExample from './example/ForceUpdateExample';\nimport Customer from './components/Customer';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport Table from '@material-ui/core/Table';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport LifeCycleSample from './LifeCycleSample';\nimport CustomerAdd from './components/CustomerAdd';\n// /**\n//  * react의 component를 활용\n//  */\n// class App extends React.Component {\n//   /**\n//    * 생성자\n//    * @param {}} props \n//    */\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             username:null\n//         };\n//     } \n//   /**\n//    * 외부 서버 fetch , mount\n//    */\n//   componentDidMount(){\n//     fetch('api/group')\n//          .then(res => res.json())\n//          .then(data => this.setState({username:data.username}));\n//   }\n//   /**\n//    * 렌더링 시작\n//    */\n// \trender() {\n//     const {username} = this.state;\n\n    \n//     return (\n//         <div className=\"App\">\n//           <header className=\"App-header\">\n//             <p className=\"rebeccapurple\"> {username ? `Hello ${username}` : 'Hello World'}</p>\n//           </header>\n//         </div>\n//     );\n//     ;\n//   }\n// }\n// const App = () => {\n//   return <MyWork/>\n// };\n// const App = () => {\n//   return <MyComponent/>;\n// };\n// const App = () => {\n//     return <ForceUpdateExample/>;\n// };\nconst customers = [\n  {\n    'id':1,\n    'image':'./images/아이유1.jpeg',\n    'name':'아이유',\n    'birthday':'1993-05-13',\n    'gender':'여자',\n    'job':'가수'\n  }\n,\n{\n  'id':2,\n  'image':'./images/아이유1.jpeg',\n  'name':'아이유',\n  'birthday':'1993-05-13',\n  'gender':'여자',\n  'job':'가수'\n}\n\n,{\n  'id':3,\n  'image':'./images/아이유1.jpeg',\n  'name':'아이유',\n  'birthday':'1993-05-13',\n  'gender':'여자',\n  'job':'가수'\n}\n\n\n\n]\n\n\n// const App = () => {\n  \n//   return (\n//     <Table>\n//      <TableHead>\n// \t\t\t<TableRow>\n// \t\t\t<TableCell>번호</TableCell>\n// \t\t\t<TableCell>이미지</TableCell>\n// \t\t\t<TableCell>이름</TableCell>\n// \t\t\t<TableCell>생년월일</TableCell>\n// \t\t\t<TableCell>성별</TableCell>\n// \t\t\t<TableCell>직업</TableCell>\n// \t\t\t</TableRow>\n// \t\t\t</TableHead>\n\n//       <TableBody>\n\n//       {customers.map(customer => { \n// \t\t\t  return  <Customer  key = {customer.id} \n// \t\t\t                     id={customer.id}\n//                           image={customer.image}\n//                           name={customer.name}\n//                           birthday={customer.birthday}\n//                           gender={customer.gender}\n//                           job={customer.job} \n//                 />\n// \t\t\t  })\n// \t\t\t}\n\n\n//       </TableBody> \n//     </Table>\n\n//   ) \n// };\n// export default App;\nconst styles = theme => ({\n  root: {\n  width: \"100%\",\n  marginTop: theme.spacing.unit * 3,\n  overflowX: \"auto\"\n  },\n  table: {\n  minWidth: 1080\n  },\n  progress: {\n    margin:theme.spacing.unit*2\n  }\n  });\n  function getRandomColor(){\n    return '#' + Math.floor(Math.random() * 16777215).toString(16); \n  }\nclass App extends React.Component {\n\n//   state = {\n//     customers:'',\n//     completed: 0\n//   }\n\n//   componentDidMount(){\n//     //비동기 방식 데이터 요청\n//     this.callApi()\n//                   .then(response => this.setState({customers:response}))\n//                   .catch(error => console.log(error));\n//   }\n//   componentWillUnmount(){\n//     clearInterval(this.timer);\n//   }\n//   callApi = async () =>{\n//     //api/customers uri 를 통해 받은 응답을 비동기방식으로 요청해라.\n//     const response = await fetch('/api/customers');\n//     //받은 응답을 json으로 변경해라\n//     //json 으로 받은 내용을 body 변수에 비동기 방식으로 저장해라.\n//     const body = await response.json();\n//     return body;\n//   }\n//   progress = () =>{\n//     //completed function key = completed\n//     const {completed} = this.state;\n//     //json 형식으로 setState 한다 ----> completed : 0, ex) name : \"name\"\n//     this.setState({completed : completed > 100 ? 0 : completed + 1});\n//   }\n\n//   render() {\n// \t\treturn (\n//       <Table>\n// \t\t\t<TableHead>\n// \t\t\t<TableRow>\n// \t\t\t<TableCell>번호</TableCell>\n// \t\t\t<TableCell>이미지</TableCell>\n// \t\t\t<TableCell>이름</TableCell>\n// \t\t\t<TableCell>생년월일</TableCell>\n// \t\t\t<TableCell>성별</TableCell>\n// \t\t\t<TableCell>직업</TableCell>\n// \t\t\t</TableRow>\n// \t\t\t</TableHead>\n// \t\t\t<TableBody>\n// \t\t\t{this.state.customers &&\n// \t\t\t this.state.customers.map(customer => { \n// \t\t\t     return  <Customer  key = {customer.id} \n// \t\t\t                     id={customer.id}\n// \t\t\t\t\t\t\t\timage={customer.image}\n// \t\t\t\t\t\t\t\tname={customer.name}\n// \t\t\t\t\t\t\t\tbirthday={customer.birthday}\n// \t\t\t\t\t\t\t\tgender={customer.gender}\n// \t\t\t\t\t\t\t\tjob={customer.job} />\n// \t\t\t  })\n// \t\t\t}\n// \t\t\t<TableRow>\n// \t\t\t<TableCell colSpan=\"6\"  align=\"center\">\n// \t\t\t<CircularProgress  className={styles.progress} \n// \t\t\t      variant=\"determinate\" value={this.state.completed} />\n// \t\t\t</TableCell>\n// \t\t\t</TableRow>\n// \t\t\t</TableBody>\n// \t\t\t</Table>\n// \t\t\t);\n// \t}\n\n \n  // state = {\n  //   color:'#000000'\n  // }\n  // handleClick = () => { \n  //   this.setState({ color: getRandomColor() });\n  // }\n  \n  // render() {\n  //   return (\n  //     <div>\n  //       <button onClick={this.handleClick}>랜덤 색상</button>\n  //       <LifeCycleSample color={this.state.color}/>\n  //     </div>\n  //   );\n  // }\n\n  constructor(props){\n    super(props);\n    this.state = {\n      customers : '',\n      completed : 0\n    }\n    this.stateRefresh = this.stateRefresh.bind(this);\n  }\n\n  stateRefresh(){\n    this.setState({\n      customers : '',\n      completed : 0\n    });\n    \n    this.callApi()\n                  .then(response => this.setState({customers:response}))\n                  .catch(error => console.log(error));\n  }\n  callApi = async () =>{\n        //api/customers uri 를 통해 받은 응답을 비동기방식으로 요청해라.\n        const response = await fetch('/api/customers');\n        //받은 응답을 json으로 변경해라\n        //json 으로 받은 내용을 body 변수에 비동기 방식으로 저장해라.\n        const body = await response.json();\n        return body;\n  }\n  componentDidMount(){ //비동기 방식 데이터 요청\n    this.timer = setInterval(this.progress, 20);\n    this.callApi()\n                  .then(response => this.setState({customers:response}))\n                  .catch(error => console.log(error));\n\n  }\n  progress = () =>{\n        //completed function key = completed\n        const {completed} = this.state;\n        //json 형식으로 setState 한다 ----> completed : 0, ex) name : \"name\"\n        this.setState({completed : completed > 100 ? 0 : completed + 1});\n  }\n   render() {\n\t\treturn (\n      <div>\n     <Table className={styles.table}>\n     <TableHead>\n     <TableRow>\n     <TableCell>번호</TableCell>\n     <TableCell>이미지</TableCell>\n     <TableCell>이름</TableCell>\n     <TableCell>생년월일</TableCell>\n     <TableCell>성별</TableCell>\n     <TableCell>직업</TableCell>\n     </TableRow>\n     </TableHead>\n     <TableBody>\n     {this.state.customers?\n      this.state.customers.map(customer => { \n          return  <Customer stateRefresh={this.stateRefresh} \n                           key = {customer.id} \n                          id={customer.id}\n                    image={customer.image}\n                    name={customer.name}\n                    birthday={customer.birthday}\n                    gender={customer.gender}\n                    job={customer.job} />\n       }) :\n      \n     <TableRow>\n     <TableCell colSpan=\"6\"  align=\"center\">\n     <CircularProgress  className={styles.progress} \n           variant=\"determinate\" value={this.state.completed} />\n     </TableCell>\n     </TableRow>\n     }\n     </TableBody>\n     </Table>\n     <CustomerAdd stateRefresh={this.stateRefresh} />\n     </div>\n\n\t\t\t);\n    \n  }\n}\n\nexport default App;\n","C:\\app\\mywebapp\\src\\components\\Customer.js",["45","46"],"/**\r\n * Javascript Xml JSX 를 사용하기 위해 react를 import 해야한다.\r\n */\r\nimport React, {Component, Fragment} from 'react';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport CustomerDel from './CustomerDel';\r\n/**\r\n * EntityComponent 개념\r\n * Class 형 Component ---> React의 Component를 상속받아야 한다.\r\n */\r\nclass Customer extends React.Component{\r\n/**\r\n * 반드시 있어야하는 render 함수\r\n */\r\nrender(){\r\n    return (\r\n    /**\r\n     * 최상위 element는 반드시 하나여야한다.\r\n       모든 태그는 닫는 태그가 반드시 있어야한다.\r\n        this.props로 Customer Componet 객체에 직접 접근하여 값을 출력한다.\r\n        {}를 사용하여 값에 접근한다.\r\n    */\r\n        <TableRow>\r\n\t\t    <TableCell> {this.props.id}</TableCell>\t\t \r\n\t\t    <TableCell><img src={this.props.image} width=\"70\" height=\"70\" alt=\"profile\" /></TableCell>\r\n\t\t\t<TableCell><h2>{this.props.name}({this.props.id})</h2></TableCell>\r\n\t\t\t<TableCell><p>{this.props.birthday}</p></TableCell>\r\n            <TableCell><p>{this.props.gender}</p></TableCell>\r\n            <TableCell><p>{this.props.job}</p></TableCell>\r\n            <TableCell><CustomerDel stateRefresh={this.props.stateRefresh} \r\n                                    id={this.props.id}/>\r\n            </TableCell>\r\n            \r\n\t\t </TableRow>\r\n\r\n    );\r\n}\r\n\r\n}\r\n/**\r\n * 컴포넌트를 사용하기 위해서 export 해주어야한다.\r\n */\r\nexport default Customer;","C:\\app\\mywebapp\\src\\example\\ForceUpdateExample.js",["47"],"C:\\app\\mywebapp\\src\\LifeCycleSample.js",[],"C:\\app\\mywebapp\\src\\components\\CustomerAdd.js",["48"],"C:\\app\\mywebapp\\src\\components\\CustomerDel.js",[],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":1,"column":16,"nodeType":"55","messageId":"56","endLine":1,"endColumn":25},{"ruleId":"53","severity":1,"message":"57","line":1,"column":27,"nodeType":"55","messageId":"56","endLine":1,"endColumn":35},{"ruleId":"53","severity":1,"message":"58","line":2,"column":8,"nodeType":"55","messageId":"56","endLine":2,"endColumn":12},{"ruleId":"53","severity":1,"message":"59","line":16,"column":8,"nodeType":"55","messageId":"56","endLine":16,"endColumn":23},{"ruleId":"53","severity":1,"message":"60","line":66,"column":7,"nodeType":"55","messageId":"56","endLine":66,"endColumn":16},{"ruleId":"53","severity":1,"message":"61","line":148,"column":12,"nodeType":"55","messageId":"56","endLine":148,"endColumn":26},{"ruleId":"53","severity":1,"message":"54","line":4,"column":16,"nodeType":"55","messageId":"56","endLine":4,"endColumn":25},{"ruleId":"53","severity":1,"message":"57","line":4,"column":27,"nodeType":"55","messageId":"56","endLine":4,"endColumn":35},{"ruleId":"53","severity":1,"message":"54","line":1,"column":17,"nodeType":"55","messageId":"56","endLine":1,"endColumn":26},{"ruleId":"53","severity":1,"message":"62","line":9,"column":10,"nodeType":"55","messageId":"56","endLine":9,"endColumn":20},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'Fragment' is defined but never used.","'logo' is defined but never used.","'LifeCycleSample' is defined but never used.","'customers' is assigned a value but never used.","'getRandomColor' is defined but never used.","'withStyles' is defined but never used.","no-global-assign","no-unsafe-negation"]